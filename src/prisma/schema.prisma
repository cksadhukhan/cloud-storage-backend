// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  files          File[]           @relation("FileOwner")
  FilePermission FilePermission[]
}

model File {
  id             String           @id @default(uuid())
  originalName   String
  virtualPath    String
  filename       String
  userId         String
  description    String? // Optional description field
  size           Int? // Optional size field
  type           String? // Optional type field
  createdAt      DateTime         @default(now())
  currenthash    String           @default("")
  currentVersion Int              @default(0)
  versions       FileVersion[]
  permissions    FilePermission[]
  metadata       Metadata[]

  User User @relation("FileOwner", fields: [userId], references: [id])
}

model FileVersion {
  id        String   @id @default(uuid())
  fileId    String
  version   Int
  filename  String
  hash      String   @default("")
  createdAt DateTime @default(now())

  File File @relation(fields: [fileId], references: [id])
}

model FilePermission {
  id        String  @id @default(uuid())
  fileId    String
  userId    String
  canRead   Boolean @default(false)
  canWrite  Boolean @default(false)
  canDelete Boolean @default(false)

  // owner user[]

  File File @relation(fields: [fileId], references: [id])
  User User @relation(fields: [userId], references: [id])

  @@unique([fileId, userId])
}

model Metadata {
  id        String   @id @default(uuid())
  fileId    String
  key       String
  value     String
  createdAt DateTime @default(now())

  File File @relation(fields: [fileId], references: [id])

  @@unique([fileId, key]) // Ensures each file has unique metadata keys
}
